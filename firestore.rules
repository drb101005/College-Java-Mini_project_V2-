/**
 * @file Firebase Security Rules for the Student Discussion Forum.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a public-read, owner-write model for questions.
 * It uses denormalization to avoid costly `get()` calls and to maintain Authorization Independence for listing operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; owned only by the user.
 * - /questions/{questionId}: Stores questions; publicly readable, owner-modifiable. Includes denormalized `authorId`.
 * - /questions/{questionId}/answers/{answerId}: Stores answers; owner-modifiable. Includes `authorId`.
 * - /questions/{questionId}/answers/{answerId}/comments/{commentId}: Stores comments; owner-modifiable. Includes `authorId`.
 * - /tags/{tagId}: Stores tags; publicly readable.
 * - /roles_admin/{userId}: Admin role assignments.
 *
 * Key Security Decisions:
 * - Users can only manage their own profiles.
 * - Questions are publicly readable but can only be created, updated, or deleted by their authors.
 * - Admin privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of questions is public.
 *
 * Denormalization for Authorization:
 * - Questions store the `authorId` of the user who created them, enabling ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user with matching userId.
     * @allow (get, list): Authenticated user with matching userId.
     * @deny (create, update, delete): Authenticated user with non-matching userId.
     * @deny (get, list): Authenticated user with non-matching userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to questions. Questions are publicly readable but only the author can modify them.
     * @path /questions/{questionId}
     * @allow (get, list): Any user can read questions.
     * @allow (create): Authenticated user, `authorId` field MUST match the user's UID.
     * @allow (update, delete): Authenticated user MUST be the author of the question.
     * @deny (create): Authenticated user, `authorId` field does not match the user's UID.
     * @deny (update, delete): Authenticated user is not the author of the question.
     * @principle Public read, owner-only writes.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
       function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to answers within a question. Only the author can modify their answers.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (get, list): Any user can read answers.
     * @allow (create): Authenticated user, `authorId` field MUST match the user's UID.
     * @allow (update, delete): Authenticated user MUST be the author of the answer.
     * @deny (create): Authenticated user, `authorId` field does not match the user's UID.
     * @deny (update, delete): Authenticated user is not the author of the answer.
     * @principle Owner-only writes.
     */
    match /questions/{questionId}/answers/{answerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to comments within an answer. Only the author can modify their comments.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @allow (create): Authenticated user, `authorId` field MUST match the user's UID.
     * @allow (update, delete): Authenticated user MUST be the author of the comment.
     * @deny (create): Authenticated user, `authorId` field does not match the user's UID.
     * @deny (update, delete): Authenticated user is not the author of the comment.
     * @principle Owner-only writes.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }
      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to tags. Tags are publicly readable.
     * @path /tags/{tagId}
     * @allow (get, list): Any user can read tags.
     * @deny (create, update, delete): No one can create, update, or delete tags (for now).
     * @principle Public read, no writes allowed.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls admin role assignments. Existence of a document grants admin privileges.
     * @path /roles_admin/{userId}
     * @allow (get, list): Only an existing admin can get/list.
     * @allow (create, update, delete): Only an existing admin can create/update/delete roles.
     * @principle Role-based access control.
     */
     match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }
        allow get, list: if isAdmin();
        allow create, update, delete: if isAdmin();
     }
  }
}