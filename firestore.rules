/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for questions.
 * All data is organized into collections: /users, /questions, /tags, and subcollections under /questions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /questions/{questionId}: Stores questions, publicly readable but writable only by the author.
 * - /questions/{questionId}/answers/{answerId}: Stores answers to questions, writable only by the answer author.
 * - /questions/{questionId}/answers/{answerId}/comments/{commentId}: Stores comments on answers, writable only by the comment author.
 * - /tags/{tagId}: Stores tags, publicly readable and writable (for simplicity in this prototype).
 * - /roles_admin/{userId}: Stores admin roles, granting admin privileges to the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Questions are publicly readable, but only the author can modify or delete them.
 * - Answers and comments are writable only by their respective authors.
 * - Listing of users is disallowed.
 * - Admin roles grant full access.
 *
 * Denormalization for Authorization:
 * - Questions denormalize the author's role to avoid costly `get()` calls during listing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile (i.e., /users/user123).
     * @allow (get, update, delete) - User with ID 'user123' can read, update, and delete their own profile (i.e., /users/user123).
     * @deny (create) - User with ID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with ID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to questions. Questions are publicly readable, but only the author can modify them.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read any question.
     * @allow (create) - User with ID 'user123' can create a question with authorId 'user123'.
     * @allow (update, delete) - User with ID 'user123' can update/delete their own question.
     * @deny (create) - User with ID 'user456' cannot create a question with authorId 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete question created by 'user123'.
     * @principle Implements a public-read, owner-write model for questions.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
          return request.auth.uid == resource.data.authorId;
      }
        function isCreatingOwner() {
          return request.auth.uid == request.resource.data.authorId;
      }
      function isExistingOwner() {
        return isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to answers. Only the answer's author can modify or delete it.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (create) - User with ID 'user123' can create an answer with authorId 'user123'.
     * @allow (get, list) - Any user can read answers.
     * @allow (update, delete) - User with ID 'user123' can update/delete their own answer.
     * @deny (create) - User with ID 'user456' cannot create an answer with authorId 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete an answer created by 'user123'.
     * @principle Enforces document ownership for answers.
     */
    match /questions/{questionId}/answers/{answerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
          return request.auth.uid == resource.data.authorId;
      }
        function isCreatingOwner() {
          return request.auth.uid == request.resource.data.authorId;
      }
      function isExistingOwner() {
        return isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to comments. Only the comment's author can modify or delete it.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (create) - User with ID 'user123' can create a comment with authorId 'user123'.
     * @allow (get, list) - Any user can read comments.
     * @allow (update, delete) - User with ID 'user123' can update/delete their own comment.
     * @deny (create) - User with ID 'user456' cannot create a comment with authorId 'user123'.
     * @deny (update, delete) - User with ID 'user456' cannot update/delete a comment created by 'user123'.
     * @principle Enforces document ownership for comments.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
          return request.auth.uid == resource.data.authorId;
      }
       function isCreatingOwner() {
          return request.auth.uid == request.resource.data.authorId;
      }
      function isExistingOwner() {
        return isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to tags.
     * @path /tags/{tagId}
     * @allow (get, list, create, update, delete) - Any user can read, create, update, and delete tags.
     * @principle  Allows public read and write access to tags for simplicity in this prototype.
     */
    match /tags/{tagId} {
      allow get, list, create, update, delete: if true;
    }

    /**
     * @description Grants admin privileges to users who have a document in this collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}