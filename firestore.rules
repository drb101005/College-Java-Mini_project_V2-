/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for questions.
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Questions are stored in a top-level `/questions/{questionId}` collection.
 * - Answers are stored in a subcollection `/questions/{questionId}/answers/{answerId}`.
 * - Comments are stored in a subcollection `/questions/{questionId}/answers/{answerId}/comments/{commentId}`.
 * - Tags are stored in a top-level `/tags/{tagId}` collection.
 * - Admin roles are stored under `/roles_admin/{userId}`.
 * Key Security Decisions:
 * - Users can only read/write their own profile data under `/users/{userId}`.
 * - Questions are publicly readable, but only the author can modify or delete them. The author is determined by the `authorId` field on the question.
 * - Listing of users is disallowed.
 * Denormalization for Authorization:
 * - Questions include the `authorId` to easily verify ownership for updates and deletes.
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public questions are stored in the top-level `/questions` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId) ;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read questions, but only the author can modify or delete them.
     * @path /questions/{questionId}
     * @allow (get) Any user can read a question.
     * @allow (list) Any user can list questions.
     * @allow (create) User with ID 'user123' can create a question with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update a question with authorId 'user123'.
     * @allow (delete) User with ID 'user123' can delete a question with authorId 'user123'.
     * @deny (create) User with ID 'user456' cannot create a question with authorId 'user123'.
     * @deny (update) User with ID 'user456' cannot update a question with authorId 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a question with authorId 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /questions/{questionId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }

    /**
     * @description Allows anyone to read answers, but only the author can modify or delete them.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (get) Any user can read an answer.
     * @allow (list) Any user can list answers to a question.
     * @allow (create) User with ID 'user123' can create an answer with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update an answer with authorId 'user123'.
     * @allow (delete) User with ID 'user123' can delete an answer with authorId 'user123'.
     * @deny (create) User with ID 'user456' cannot create an answer with authorId 'user123'.
     * @deny (update) User with ID 'user456' cannot update an answer with authorId 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete an answer with authorId 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /questions/{questionId}/answers/{answerId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }

    /**
     * @description Allows anyone to read comments, but only the author can modify or delete them.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (get) Any user can read a comment.
     * @allow (list) Any user can list comments to an answer.
     * @allow (create) User with ID 'user123' can create a comment with authorId 'user123'.
     * @allow (update) User with ID 'user123' can update a comment with authorId 'user123'.
     * @allow (delete) User with ID 'user123' can delete a comment with authorId 'user123'.
     * @deny (create) User with ID 'user456' cannot create a comment with authorId 'user123'.
     * @deny (update) User with ID 'user456' cannot update a comment with authorId 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a comment with authorId 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && request.auth.uid == resource.data.authorId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }

    /**
     * @description Allows anyone to read tags, but restricts creation, updating, and deletion.
     * @path /tags/{tagId}
     * @allow (get) Any user can read a tag.
     * @allow (list) Any user can list tags.
     * @deny (create) No one can create a tag.
     * @deny (update) No one can update a tag.
     * @deny (delete) No one can delete a tag.
     * @principle Restricts write access to tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Only allows admin to create roles.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        function isAdmin() {
            return request.auth != null;
        }
        allow get: if isAdmin();
        allow list: if false;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }
}