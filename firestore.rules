/**
 * @file Firebase Security Rules for Student Discussion Forum
 *
 * @corePhilosophy This ruleset prioritizes security by enforcing a strict ownership model for user data and leveraging denormalization to avoid costly and potentially insecure `get()` operations.  It also ensures Authorization Independence for top-level collections of public resources.
 *
 * @dataStructure
 *   - `/users/{userId}`: Stores user profiles; access restricted to the user themselves.
 *   - `/questions/{questionId}`: Stores questions; publicly readable, but create/update/delete are restricted to the author.
 *   - `/questions/{questionId}/answers/{answerId}`: Stores answers to questions; access restricted to the author.
 *   - `/questions/{questionId}/answers/{answerId}/comments/{commentId}`: Stores comments on answers; access restricted to the author.
 *   - `/tags/{tagId}`: Stores tags; publicly readable.  Write operations are disabled.
 *   - `/roles_admin/{userId}`: Indicates admin privileges; existence grants admin role to a user.
 *
 * @keySecurityDecisions
 *   - **No User Listing:** Listing users is explicitly denied to protect user privacy.
 *   - **Public Questions Listing:** Listing questions is allowed for all users.
 *   - **Owner-Only Writes:**  Create/update/delete operations are generally restricted to the document owner or an admin.
 *   - **Authorization Independence:** Denormalization of roles prevents rulesets from using `get()` calls.
 *
 * @denormalizationForAuthorization  The `questions` collection denormalizes the `authorId` to allow owner-based access control. The `authorRole` is also denormalized, though not used currently. This avoids security rules from needing to perform costly `get()` operations to verify ownership.
 *
 * @structuralSegregation  The application uses structural segregation to separate public question data in `/questions` from private user data in `/users/{userId}`. This allows for public listing of questions while maintaining strict control over user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their own profile if request.auth.uid == 'abc'
     * @allow (get, update, delete) - User 'abc' can read, update, or delete their own profile if request.auth.uid == 'abc'
     * @deny (create, get, update, delete) - User 'def' cannot create, read, update, or delete user 'abc' profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /questions/{questionId} collection.
     * @path /questions/{questionId}
     * @allow (get, list) - Any user can read or list questions.
     * @allow (create) - User 'abc' can create a question with authorId: 'abc'.
     * @allow (update, delete) - User 'abc' can update/delete a question where resource.data.authorId == 'abc'.
     * @deny (create, update, delete) - User 'def' cannot create/update/delete questions for user 'abc'.
     * @principle Public read with owner-only writes, validates relational integrity.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rule for the /questions/{questionId}/answers/{answerId} collection.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (create) - User 'abc' can create an answer with authorId: 'abc'.
     * @allow (get, list, update, delete) - User 'abc' can read, update, or delete their own answer if resource.data.authorId == 'abc'.
     * @deny (create, get, list, update, delete) - User 'def' cannot create, read, update, or delete user 'abc' answer.
     * @principle Enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rule for the /questions/{questionId}/answers/{answerId}/comments/{commentId} collection.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (create) - User 'abc' can create a comment with authorId: 'abc'.
     * @allow (get, list, update, delete) - User 'abc' can read, update, or delete their own comment if resource.data.authorId == 'abc'.
     * @deny (create, get, list, update, delete) - User 'def' cannot create, read, update, or delete user 'abc' comment.
     * @principle Enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rule for the /tags/{tagId} collection.
     * @path /tags/{tagId}
     * @allow (get, list) - Any user can read or list tags.
     * @deny (create, update, delete) - No user can create, update, or delete tags.
     * @principle Public read, no writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
     * @description Rule for the /roles_admin/{userId} collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if false;
        allow create: if isAdmin();
        allow update: if false;
        allow delete: if isAdmin();
    }
  }
}