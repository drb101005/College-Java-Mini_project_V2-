/**
 * @fileoverview Firestore Security Rules for the Student Discussion Forum.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure, scalable, and maintainable backend by focusing on Authorization Independence, using denormalization, and structural segregation.
 *
 * Data Structure:
 * - User profiles: /users/{userId}
 * - Questions: /questions/{questionId} (top-level collection)
 * - Answers: /questions/{questionId}/answers/{answerId} (subcollection)
 * - Comments: /questions/{questionId}/answers/{answerId}/comments/{commentId} (subcollection)
 * - Tags: /tags/{tagId} (top-level collection)
 * - Admin roles: /roles_admin/{userId}
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Questions are publicly listable, but creating, updating, and deleting them is restricted to the author.
 * - Only the user or an admin can access admin roles.
 * - Denormalization of author role to the questions will maintain QAPs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) Authenticated user with matching ID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth ID.
     * @deny (get, update, delete) Unauthenticated users cannot access user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read questions, but only the author can create, update, or delete them.
     * @path /questions/{questionId}
     * @allow (get, list) Any user can read or list questions.
     * @allow (create) Authenticated user can create a question with their ID as the authorId.
     * @allow (update, delete) Authenticated user who is the author can update or delete the question.
     * @deny (create) User cannot create a question with an `authorId` that doesn't match their auth ID.
     * @deny (update, delete) User cannot update or delete a question if they are not the author.
     * @principle Public read with owner-only writes; enforces document ownership for writes.
     */
    match /questions/{questionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

        function isExistingOwner(authorId) {
        return isOwner(authorId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows authorized users to manage answers for a question.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (create) Authenticated user can create an answer with their ID as the authorId.
     * @allow (get, list) Any user can read or list answers for a question.
     * @allow (update, delete) Authenticated user who is the author can update or delete their answer.
     * @deny (create) User cannot create an answer with an `authorId` that doesn't match their auth ID.
     * @deny (update, delete) User cannot update or delete an answer if they are not the author.
     * @principle Public read with owner-only writes; enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows authorized users to manage comments for an answer.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (create) Authenticated user can create a comment with their ID as the authorId.
     * @allow (get, list) Any user can read or list comments for an answer.
     * @allow (update, delete) Authenticated user who is the author can update or delete their comment.
     * @deny (create) User cannot create a comment with an `authorId` that doesn't match their auth ID.
     * @deny (update, delete) User cannot update or delete a comment if they are not the author.
     * @principle Public read with owner-only writes; enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

        function isExistingOwner(authorId) {
        return isOwner(authorId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read tags, but only admins can create, update, or delete them.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read or list tags.
     * @deny (create, update, delete) Only admins can create, update, or delete tags.
     * @principle Public read, admin-only writes.
     */
    match /tags/{tagId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows only the user to read/write their admin role, or an existing admin to grant/revoke.
     * @path /roles_admin/{userId}
     * @allow (create, get, update, delete) Only the user or an admin can create, get, update, or delete roles.
     * @deny (create, get, update, delete) Unauthenticated users cannot access admin roles.
     * @principle Restricts access to admin roles to the user and existing admins.
     */
    match /roles_admin/{userId} {

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(userId) || isAdmin());
    }
  }
}