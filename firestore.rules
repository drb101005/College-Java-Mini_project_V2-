/**
 * @fileoverview Firestore Security Rules for the Student Discussion Forum.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and authorization independence. It enforces
 * user-ownership for personal data and allows public read access to questions
 * while restricting write access to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /questions/{questionId}: Stores questions, publicly readable but owner-writable.
 * - /questions/{questionId}/answers/{answerId}: Stores answers to questions, only the question's author can update.
 * - /questions/{questionId}/answers/{answerId}/comments/{commentId}: Stores comments on answers, only the question's author can update.
 * - /tags/{tagId}: Stores tags, publicly readable.
 * - /roles_admin/{userId}: Presence grants admin privileges.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - Questions are publicly readable, but only the author can modify them.
 * - Listing of questions is allowed for everyone.
 * - Data validation is relaxed for prototyping, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - Questions store the `authorId` of the user who created them.
 *
 * Structural Segregation:
 * - Private user data is stored under `/users/{userId}`, while public questions
 *   are stored in the top-level `/questions` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the existing owner of the resource (and the resource exists).
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has admin rights.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, update, delete) Signed-in user can get, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a different user ID.
     * @deny (get, update, delete) User cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for questions.
     * @path /questions/{questionId}
     * @allow (get, list) Anyone can read questions.
     * @allow (create) Signed-in user can create a question with their authorId.
     * @allow (update, delete) Only the author can update or delete their question.
     * @deny (create) User cannot create a question with someone else's authorId.
     * @deny (update, delete) User cannot update or delete a question they don't own.
     * @principle Allows public read access with owner-only writes and validates relational integrity.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rules for answers to questions.
     * @path /questions/{questionId}/answers/{answerId}
     *  @allow (create) Signed-in user can create an answer with their authorId.
     *  @allow (get, list) Anyone can read answers.
     *  @allow (update, delete) Only the author of the answer or an admin can update or delete it.
     *  @deny (create) User cannot create an answer with someone else's authorId.
     *  @deny (update, delete) User cannot update or delete an answer they don't own.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /questions/{questionId}/answers/{answerId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rules for comments on answers.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (create) Signed-in user can create a comment with their authorId.
     * @allow (get, list) Anyone can read comments.
     * @allow (update, delete) Only the author of the comment or an admin can update or delete it.
     *  @deny (create) User cannot create a comment with someone else's authorId.
     *  @deny (update, delete) User cannot update or delete a comment they don't own.
     * @principle Enforces document ownership for writes and validates relational integrity.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.authorId) || isAdmin();
    }

    /**
     * @description Rules for tags.
     * @path /tags/{tagId}
     * @allow (get, list) Anyone can read tags.
     * @deny (create, update, delete) No one can create, update, or delete tags.
     * @principle Restricts write access to tags.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (create) Only admins can create admin roles.
     * @allow (get) Only admins can get admin roles.
     * @allow (update) Only admins can update admin roles.
     * @allow (delete) Only admins can delete admin roles.
     * @allow (list) Only admins can list admin roles.
     */
    match /roles_admin/{userId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
  }
}