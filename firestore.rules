/**
 * @file Firestore Security Rules for Student Discussion Forum
 * @corePhilosophy This ruleset enforces a user-ownership model for user profiles and an author-ownership model for questions, answers, and comments.  Admin privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection. Public read access is granted to the `/questions` and `/tags` collections, while write access is restricted to authorized users.
 * @dataStructure The database is structured with user data under `/users/{userId}`, questions under `/questions/{questionId}`, answers under `/questions/{questionId}/answers/{answerId}`, comments under `/questions/{questionId}/answers/{answerId}/comments/{commentId}`, tags under `/tags/{tagId}`, and admin roles under `/roles_admin/{userId}`.
 * @keySecurityDecisions
 *   - User listing is not allowed.
 *   - Questions and Tags are publicly readable, but writes are restricted to authorized users.
 *   - Read and write access to user profiles is restricted to the owning user.
 *   - Admin privileges are granted based on the presence of a document in `/roles_admin/{userId}`.
 *   - All write operations are validated to ensure the requesting user is authorized.
 * @denormalizationForAuthorization The author's role is denormalized into the `questions` documents to avoid needing to make `get()` calls to the `users` collection during `list` operations. User documents also contain an array of IDs for followed and bookmarked questions.
 * @structuralSegregation Private user data is stored under `/users/{userId}`, while public questions are stored in the top-level `/questions` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to users collection, allowing only the authenticated user to read/write their data.
     * @path /users/{userId}
     * @allow (create, update, delete) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can create/update/delete the /users/9qSkfJ4JGvfAPk3rA2W54jugPpY2 document.
     * @deny (create, update, delete) User with ID 'someOtherUserId' cannot create/update/delete the /users/9qSkfJ4JGvfAPk3rA2W54jugPpY2 document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only signed-in users can interact with user profiles.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants read access to all users for questions, but restricts write access to the author of the question.
     * @path /questions/{questionId}
     * @allow (get, list) Any user can read any question.
     * @allow (create) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can create a question with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (create) User with ID 'someOtherUserId' cannot create a question with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @allow (update, delete) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can update/delete the question with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (update, delete) User with ID 'someOtherUserId' cannot update/delete the question with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @principle Enforces owner-only writes for questions.
     */
    match /questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants access to answers, allowing only the author of the answer to read/write their data.
     * @path /questions/{questionId}/answers/{answerId}
     * @allow (create) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can create an answer with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (create) User with ID 'someOtherUserId' cannot create an answer with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @allow (get, list, update, delete) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can read/update/delete the answer with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (get, list, update, delete) User with ID 'someOtherUserId' cannot read/update/delete the answer with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @principle Enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId} {
      allow get, list: if isSignedIn() && isOwner(resource.data.authorId);
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants access to comments, allowing only the author of the comment to read/write their data.
     * @path /questions/{questionId}/answers/{answerId}/comments/{commentId}
     * @allow (create) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can create a comment with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (create) User with ID 'someOtherUserId' cannot create a comment with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @allow (get, list, update, delete) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can read/update/delete the comment with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @deny (get, list, update, delete) User with ID 'someOtherUserId' cannot read/update/delete the comment with authorId: '9qSkfJ4JGvfAPk3rA2W54jugPpY2'.
     * @principle Enforces document ownership for writes.
     */
    match /questions/{questionId}/answers/{answerId}/comments/{commentId} {
      allow get, list: if isSignedIn() && isOwner(resource.data.authorId);
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Grants read access to all users for tags, but restricts write access.
     * @path /tags/{tagId}
     * @allow (get, list) Any user can read any tag.
     * @deny (create, update, delete) No one can create/update/delete a tag. // TODO: Implement admin-only tag management if needed.
     * @principle Public read access with restricted writes.
     */
    match /tags/{tagId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation if tag management is needed.
    }

    /**
     * @description Grants admin privileges to users who have a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (create) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can create an admin role document.
     * @allow (get, list, update, delete) User with ID '9qSkfJ4JGvfAPk3rA2W54jugPpY2' can read/update/delete their admin role document.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false; // Admin role listing is not allowed.
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}